}
# Get the estimated parameters from your model
a_estimate <- coef(lorenz_model)["a"]
beta_estimate <- coef(lorenz_model)["beta"]
# Define the function to integrate
gini_integrand <- function(x) {
x - lorenz_function(x, a_estimate, beta_estimate)
}
# Numerically integrate the function from 0 to 1
gini_result <- integrate(gini_integrand, lower = 0, upper = 1)
# Calculate the Gini coefficient
Gini_coefficient <- 1 - 2 * gini_result$value
# Print the Gini coefficient
print(Gini_coefficient)
# View the summary of the model
summary(lorenz_model)
print(R2)
# View the summary of the model
summary(lorenz_model)
lines(data$cum_pop_percent, data$fitted_values_new, col = "red")
# Plot the actual data vs. the fitted curve
plot(data$cum_pop_percent, data$cum_inc_percent, type = "p", col = "blue", main = "Estimated Curve", xlab = "Cumulative Population Percent", ylab = "Cumulative Income Percent")
lines(data$cum_pop_percent, data$fitted_values_new, col = "red")
plot(data$cum_pop_percent, data$cum_inc_percent, type = "p", col = "blue", main = "Estimated Curve", xlab = "Cumulative Population Percent", ylab = "Cumulative Income Percent")
lines(data$cum_pop_percent, data$fitted_values_new, col = "red")
data <- read_dta("inctotlarge.dta")
head(data)
data <- data %>% filter(inctot <= 9999998)
data <- data %>% filter(inctot = na)
data <- data %>% filter(inctot == na)
head(data)
View(data)
summary(data)
data <- read_dta("inctotlarge.dta")
data <- data %>% filter(inctot == na)
library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("inctotlarge.dta")
data <- read_dta("inctotlarge.dta")
head(data)
data <- data %>% filter(inctot == na)
data <- data %>% filter(inctot == NA)
data <- read_dta("inctotlarge.dta")
data <- data %>% filter(inctot == NA)
data <- read_dta("inctotlarge.dta")
data <- data %>% filter(inctot = NA)
data <- read_dta("inctotlarge.dta")
summary(data)
cleaned_data <- na.omit(data)
summary(cleaned_data)
data <- cleaned_data %>% filter(inctot <= 9999998)
library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("inctotlarge.dta")
head(data)
cleaned_data <- na.omit(data)
data <- cleaned_data %>% filter(inctot <= 9999998)
summary(cleaned_data)
#order the data from least to greatest
data <- data[order(data$inctot), ]
#create a variable for the row numbe
country_results <- data %>%
group_by(country) %>%  # Group by country
arrange(inctot, .by_group = TRUE) %>%  # Sort income within each country
mutate(
observation_number = row_number(),  # Row number within each country
inctot_adj = inctot,  # Adjusted income
inc_percent = inctot_adj / sum(inctot_adj, na.rm = TRUE),  # Income as percentage of total
cum_inc_percent = cumsum(inc_percent),  # Cumulative income percentage
pop_percent = 1 / n(),  # Population percentage for each observation
cum_pop_percent = cumsum(pop_percent)  # Cumulative population percentage
)
# Optional: View the processed data for one country
# View(country_results %>% filter(country == 32))  # Replace with specific country code
# Plot Lorenz curve for each country
country_results %>%
ggplot(aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
geom_line() +
labs(title = "Lorenz Curve by Country", x = "Cumulative Population Percentage", y = "Cumulative Income Percentage") +
theme_minimal()
# Add grid lines
# Plot Lorenz curve for each country
country_results %>%
ggplot(aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
geom_line(size = 1.5) +  # Increase the size of the lines (adjust the value as needed)
labs(title = "Lorenz Curve by Country",
x = "Cumulative Population Percentage",
y = "Cumulative Income Percentage") +
theme_minimal()
summary(data %>% filter(country == 862))
data <- cleaned_data %>% filter(inctot <= 9999998)
summary(cleaned_data)
summary(cleaned_data)
data <- cleaned_data %>% filter(inctot <= 9999997)
summary(cleaned_data)
data <- read_dta("inctotlarge.dta")
cleaned_data <- na.omit(data)
data <- cleaned_data %>% filter(inctot <= 9999997)
summary(cleaned_data)
data <- cleaned_data %>% filter(inctot != 9999998 & inctot <= 9999997)
summary(cleaned_data)
summary(data)
#create a variable for the row numbe
country_results <- data %>%
group_by(country) %>%  # Group by country
arrange(inctot, .by_group = TRUE) %>%  # Sort income within each country
mutate(
observation_number = row_number(),  # Row number within each country
inctot_adj = inctot,  # Adjusted income
inc_percent = inctot_adj / sum(inctot_adj, na.rm = TRUE),  # Income as percentage of total
cum_inc_percent = cumsum(inc_percent),  # Cumulative income percentage
pop_percent = 1 / n(),  # Population percentage for each observation
cum_pop_percent = cumsum(pop_percent)  # Cumulative population percentage
)
# Plot Lorenz curve for each country
country_results %>%
ggplot(aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
geom_line(size = 1.5) +  # Increase the size of the lines (adjust the value as needed)
labs(title = "Lorenz Curve by Country",
x = "Cumulative Population Percentage",
y = "Cumulative Income Percentage") +
theme_minimal()
#adjust data so there are no negatives
# Cap values at 1
#data$cum_inc_percent[data$cum_inc_percent > 1] <- 1
#data$cum_pop_percent[data$cum_pop_percent > 1] <- 1
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Group by country and apply the nls model within each group
results <- data %>%
group_by(country) %>%
do({
# Fit the Lorenz curve model for each country
lorenz_model <- tryCatch({
nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data = .,  # This refers to the current group (country)
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = -10, beta = -10),  # Lower bounds for parameters
upper = c(a = 10, beta = 10),  # Upper bounds for parameters
algorithm = "port")  # Port algorithm for bounded fitting
}, error = function(e) NULL)  # Handle any errors
# If the model fits, proceed
if (!is.null(lorenz_model)) {
# Calculate R-squared
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((.$cum_inc_percent - mean(.$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
# Add fitted values to the data
fitted_values_new <- predict(lorenz_model)
# Return the results as a data frame for each country
return(data.frame(country = unique(.$country), R2 = R2, fitted_values_new = fitted_values_new))
} else {
return(data.frame(country = unique(.$country), R2 = NA, fitted_values_new = NA))  # In case the model didn't fit
}
})
# Group by country and apply the nls model within each group
results <- data %>%
group_by(country) %>%
do({
# Fit the Lorenz curve model for each country
lorenz_model <- tryCatch({
nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data = .,  # This refers to the current group (country)
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = -10, beta = -10),  # Lower bounds for parameters
upper = c(a = 10, beta = 10),  # Upper bounds for parameters
algorithm = "port")  # Port algorithm for bounded fitting
}, error = function(e) NULL)  # Handle any errors
# If the model fits, proceed
if (!is.null(lorenz_model)) {
# Calculate R-squared
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((.$cum_inc_percent - mean(.$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
# Add fitted values to the data
fitted_values_new <- predict(lorenz_model)
# Return the results as a data frame for each country
return(data.frame(country = unique(.$country), R2 = R2, fitted_values_new = fitted_values_new))
} else {
return(data.frame(country = unique(.$country), R2 = NA, fitted_values_new = NA))  # In case the model didn't fit
}
})
# Check for missing values in key columns
sum(is.na(data$cum_inc_percent))
sum(is.na(data$cum_pop_percent))
# Check for missing values in key columns
sum(is.na(country_results$cum_inc_percent))
sum(is.na(country_results$cum_pop_percent))
data <- country_results
data$cum_inc_percent[data$cum_inc_percent > 1] <- 1
data$cum_pop_percent[data$cum_pop_percent > 1] <- 1
lorenz_model<- nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data = data,
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = -10, beta = -10),  # Lower bounds to ensure positivity
upper = c(a = 10, beta = 10), # Upper bounds
algorithm = "port")  # Port algorithm for bounded fitting
#adjust data so there are no negatives
# Cap values at 1
data <- country_results
# Check for missing values in key columns
sum(is.na(country_results$cum_inc_percent))
sum(is.na(country_results$cum_pop_percent))
data$cum_inc_percent[data$cum_inc_percent > 1] <- 1
data$cum_pop_percent[data$cum_pop_percent > 1] <- 1
# Group by country and apply the nls model within each group
results <- data %>%
group_by(country) %>%
do({
# Fit the Lorenz curve model for each country
lorenz_model <- tryCatch({
nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data = .,  # This refers to the current group (country)
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = -10, beta = -10),  # Lower bounds for parameters
upper = c(a = 10, beta = 10),  # Upper bounds for parameters
algorithm = "port")  # Port algorithm for bounded fitting
}, error = function(e) {
message("Error for country ", unique(.$country), ": ", e$message)
return(NULL)  # Return NULL in case of error
})
# If the model fits, proceed
if (!is.null(lorenz_model)) {
# Calculate R-squared
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((.$cum_inc_percent - mean(.$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
# Add fitted values to the data
fitted_values_new <- predict(lorenz_model)
# Return the results as a data frame for each country
return(data.frame(country = unique(.$country), R2 = R2, fitted_values_new = fitted_values_new))
} else {
return(data.frame(country = unique(.$country), R2 = NA, fitted_values_new = NA))  # In case the model didn't fit
}
})
#adjust data so there are no negatives
# Cap values at 1
data <- country_results
# Check for missing values in key columns
sum(is.na(country_results$cum_inc_percent))
sum(is.na(country_results$cum_pop_percent))
data$cum_inc_percent[data$cum_inc_percent > 1] <- 1
data$cum_pop_percent[data$cum_pop_percent > 1] <- 1
# Group by country and apply the nls model within each group
results <- data %>%
group_by(country) %>%
group_modify(~ {
# Fit the Lorenz curve model for each country
lorenz_model <- tryCatch({
nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data = .x,  # This refers to the current group (country)
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = -10, beta = -10),  # Lower bounds for parameters
upper = c(a = 10, beta = 10),  # Upper bounds for parameters
algorithm = "port")  # Port algorithm for bounded fitting
}, error = function(e) {
message("Error for country ", unique(.x$country), ": ", e$message)
return(NULL)  # Return NULL in case of error
})
# If the model fits, calculate R-squared and predictions
if (!is.null(lorenz_model)) {
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((.x$cum_inc_percent - mean(.x$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
fitted_values_new <- predict(lorenz_model)
return(.x %>%
mutate(fitted_values_new = fitted_values_new,
R2 = R2))  # Add fitted values and R2 for this country
} else {
return(.x %>%
mutate(fitted_values_new = NA, R2 = NA))  # Handle failure case
}
})
# Plot the results with fitted curves
ggplot(results, aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
geom_point() +
geom_line(aes(y = fitted_values_new), size = 1.2) +
labs(title = "Estimated Lorenz Curves by Country",
x = "Cumulative Population Percent",
y = "Cumulative Income Percent") +
theme_minimal()
# Define the fitted Lorenz curve function based on the estimated parameters a and beta
lorenz_function <- function(x, a, beta) {
x - a * x^a * (1 - x)^beta
}
# Calculate Gini coefficient for each country using the already fitted models
gini_results <- results %>%
group_by(country) %>%
summarise(
# Extract previously estimated coefficients for each country
a_estimate = first(coef(lorenz_model)["a"]),
beta_estimate = first(coef(lorenz_model)["beta"]),
# Calculate the Gini coefficient
Gini_coefficient = {
# Define the integrand
gini_integrand <- function(x) {
x - lorenz_function(x, a_estimate, beta_estimate)
}
# Numerically integrate the function from 0 to 1
gini_result <- tryCatch({
integrate(gini_integrand, lower = 0, upper = 1)$value
}, error = function(e) NA)  # Handle potential errors
# Calculate the Gini coefficient
if (!is.na(gini_result)) {
1 - 2 * gini_result
} else {
NA
}
}
)
# Print the Gini coefficient for each country
gini_results %>%
select(country, Gini_coefficient) %>%
print()
summary(results)
summary(fitted_values_new)
# Group by country and apply the nls model within each group
results <- data %>%
group_by(country) %>%
group_modify(~ {
# Fit the Lorenz curve model for each country
lorenz_model <- tryCatch({
nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data = .x,  # This refers to the current group (country)
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = -10, beta = -10),  # Lower bounds for parameters
upper = c(a = 10, beta = 10),  # Upper bounds for parameters
algorithm = "port")  # Port algorithm for bounded fitting
}, error = function(e) {
message("Error for country ", unique(.x$country), ": ", e$message)
return(NULL)  # Return NULL in case of error
})
# If the model fits, calculate R-squared and predictions
if (!is.null(lorenz_model)) {
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((.x$cum_inc_percent - mean(.x$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
fitted_values_new <- predict(lorenz_model)
return(.x %>%
mutate(fitted_values_new = fitted_values_new,
R2 = R2))  # Add fitted values and R2 for this country
} else {
return(.x %>%
mutate(fitted_values_new = NA, R2 = NA))  # Handle failure case
}
})
library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("inctotlarge.dta")
head(data)
cleaned_data <- na.omit(data)
data <- cleaned_data %>% filter(inctot != 9999998 & inctot <= 9999997)
summary(data)
summary(data %>% filter(country == 862))
#create a variable for the row numbe
country_results <- data %>%
group_by(country) %>%  # Group by country
arrange(inctot, .by_group = TRUE) %>%  # Sort income within each country
mutate(
observation_number = row_number(),  # Row number within each country
inctot_adj = inctot,  # Adjusted income
inc_percent = inctot_adj / sum(inctot_adj, na.rm = TRUE),  # Income as percentage of total
cum_inc_percent = cumsum(inc_percent),  # Cumulative income percentage
pop_percent = 1 / n(),  # Population percentage for each observation
cum_pop_percent = cumsum(pop_percent)  # Cumulative population percentage
)
# Optional: View the processed data for one country
# View(country_results %>% filter(country == 32))  # Replace with specific country code
# Plot Lorenz curve for each country
country_results %>%
ggplot(aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
geom_line(size = 1.5) +  # Increase the size of the lines (adjust the value as needed)
labs(title = "Lorenz Curve by Country",
x = "Cumulative Population Percentage",
y = "Cumulative Income Percentage") +
theme_minimal()
z# Add grid lines
library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("inctotlarge.dta")
head(data)
cleaned_data <- na.omit(data)
data <- cleaned_data %>% filter(inctot != 9999998 & inctot <= 9999997)
summary(data)
summary(data %>% filter(country == 862))
#create a variable for the row numbe
country_results <- data %>%
group_by(country) %>%  # Group by country
arrange(inctot, .by_group = TRUE) %>%  # Sort income within each country
mutate(
observation_number = row_number(),  # Row number within each country
inctot_adj = inctot,  # Adjusted income
inc_percent = inctot_adj / sum(inctot_adj, na.rm = TRUE),  # Income as percentage of total
cum_inc_percent = cumsum(inc_percent),  # Cumulative income percentage
pop_percent = 1 / n(),  # Population percentage for each observation
cum_pop_percent = cumsum(pop_percent)  # Cumulative population percentage
)
# Optional: View the processed data for one country
# View(country_results %>% filter(country == 32))  # Replace with specific country code
# Plot Lorenz curve for each country
country_results %>%
ggplot(aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
geom_line(size = 1.5) +  # Increase the size of the lines (adjust the value as needed)
labs(title = "Lorenz Curve by Country",
x = "Cumulative Population Percentage",
y = "Cumulative Income Percentage") +
theme_minimal()
# Add grid lines
data <- country_results
# Check for missing values in key columns
sum(is.na(country_results$cum_inc_percent))
sum(is.na(country_results$cum_pop_percent))
# Group by country and apply the nls model within each group
results <- data %>%
group_by(country) %>%
group_modify(~ {
# Fit the Lorenz curve model for each country
lorenz_model <- tryCatch({
nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data = .x,  # This refers to the current group (country)
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = -10, beta = -10),  # Lower bounds for parameters
upper = c(a = 10, beta = 10),  # Upper bounds for parameters
algorithm = "port")  # Port algorithm for bounded fitting
}, error = function(e) {
message("Error for country ", unique(.x$country), ": ", e$message)
return(NULL)  # Return NULL in case of error
})
# If the model fits, calculate R-squared and predictions
if (!is.null(lorenz_model)) {
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((.x$cum_inc_percent - mean(.x$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
fitted_values_new <- predict(lorenz_model)
return(.x %>%
mutate(fitted_values_new = fitted_values_new,
R2 = R2))  # Add fitted values and R2 for this country
} else {
return(.x %>%
mutate(fitted_values_new = NA, R2 = NA))  # Handle failure case
}
})
head(data)
#create a variable for the row numbe
country_results <- data %>%
group_by(country) %>%  # Group by country
arrange(inctot, .by_group = TRUE) %>%  # Sort income within each country
mutate(
inc_percent = inctot / sum(inctot, na.rm = TRUE),  # Income as percentage of total
cum_inc_percent = cumsum(inc_percent),  # Cumulative income percentage
pop_percent = 1 / n(),  # Population percentage for each observation
cum_pop_percent = cumsum(pop_percent)  # Cumulative population percentage
)
summary(country_results)
group_by(country) %>% summary(country_results)
country_summary <- data %>%
group_by(country) %>%
summarise(
mean_inctot = mean(inctot, na.rm = TRUE),
median_inctot = median(inctot, na.rm = TRUE),
min_inctot = min(inctot, na.rm = TRUE),
max_inctot = max(inctot, na.rm = TRUE),
sd_inctot = sd(inctot, na.rm = TRUE),  # Standard deviation
count = n()  # Number of observations
)group_by(country) %>% summary(country_results)
country_summary <- data %>%
group_by(country) %>%
summarise(
mean_inctot = mean(inctot, na.rm = TRUE),
median_inctot = median(inctot, na.rm = TRUE),
min_inctot = min(inctot, na.rm = TRUE),
max_inctot = max(inctot, na.rm = TRUE),
sd_inctot = sd(inctot, na.rm = TRUE),  # Standard deviation
)group_by(country) %>% summary(country_results)
# Summarise statistics for each country
country_summary <- data %>%
group_by(country) %>%
summarise(
mean_inctot = mean(inctot, na.rm = TRUE),
median_inctot = median(inctot, na.rm = TRUE),
min_inctot = min(inctot, na.rm = TRUE),
max_inctot = max(inctot, na.rm = TRUE),
sd_inctot = sd(inctot, na.rm = TRUE),  # Standard deviation
count = n()  # Number of observations
)
# Print the summary statistics for each country
print(country_summary)
# Summarise statistics for each country
country_summary <- data %>%
group_by(country) %>%
summarise(
min_inctot = min(pop_percent, na.rm = TRUE),
max_inctot = max(pop_percent, na.rm = TRUE),
count = n()  # Number of observations
)
# Print the summary statistics for each country
print(country_summary)
getwd()
setwd("users/rowanmorkner/Documents/school/Fall_2024/csci111/cure-e")
source("~/.active-rstudio-document", echo=TRUE)
getwd()
read.csv("data.csv")
data <- read.csv("data.csv")
head(data)
sum amout
sum(amout)
sum(data$amout)
